@page "/AddItem"
@using System.ComponentModel.DataAnnotations
@using blazor.famely.calendar.Data.CalendarData
@using blazor.famely.calendar.Data.Repositories
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@* @inject IDialogService DialogService *@
@inherits OwningComponentBase
@inject IDialogService DialogService
@attribute [Authorize]



<h3>Добавить событие</h3>

<MudCard>
    <MudForm>
        <MudCardContent>
            <MudTextField T="string" @bind-Text="_title" Label="Заголовок события" Id="titleField"/>
            <MudTextField T="string" @bind-Text="_text" Label="Заметка" Id="noteField"/>

            <MudDatePicker Label="Дата"
                           PickerVariant="PickerVariant.Static"
                           Orientation="Orientation.Landscape"
                           @bind-Date="_date"
                           HelperText="@_bound"
                           Id="datePicker"/>
            <MudTimePicker Label="Время начала"
                           @bind-Time="_startTime"
                           Editable="true"/>
            <MudTimePicker Label="Время окончания"
                           Editable="true"
                           @bind-Time="_endTime"/>

            <MudChipSet @bind-SelectedChip="selected" Filter="true">
                <MudChip Text="grey">Default</MudChip>
                <MudChip Text="purple" Color="Color.Primary">Primary</MudChip>
                <MudChip Text="pink" Color="Color.Secondary">Secondary</MudChip>
                <MudChip Text="blue" Color="Color.Info">Info</MudChip>
                <MudChip Text="green" Color="Color.Success">Success</MudChip>
                <MudChip Text="orange" Color="Color.Warning">Warning</MudChip>
                <MudChip Text="red" Color="Color.Error">Error</MudChip>
                <MudChip Text="black" Color="Color.Dark">Dark</MudChip>
            </MudChipSet>

            <MudButton
                Variant="Variant.Filled"
                Color="Color.Primary"
                Class="ml-auto"
                OnClick="@(async () => await Submit())">
                Сохранить
            </MudButton>
        </MudCardContent>
    </MudForm>
</MudCard>


@code {
    private EfRepository _repository;
    public MudChip? selected;

    protected NavigationManager _navigationManager;


    private Event _newItem = new Event();

    DateTime? _date;
    TimeSpan? _startTime = new TimeSpan(00, 45, 00);
    TimeSpan? _endTime = new TimeSpan(00, 45, 00);
    private string _title = String.Empty;
    private string _text = String.Empty;


    private const string DateFormat = "dd.MM.yyyy";
    readonly string _bound = "not set";

    protected override void OnInitialized() {
        _repository = ScopedServices.GetRequiredService<EfRepository>();
        
    }

    private async Task Submit() {
        if (!_date.HasValue && !_startTime.HasValue && !_endTime.HasValue) {
            throw new ValidationException("Date mus be not nullable");
        }


        _newItem.Title = _title;
        _newItem.Text = _text;
        _newItem.Color = selected.Color;
        if (_date != null) {
            _newItem.Start = _date.Value.Date.Add(_startTime.Value);

            TimeSpan? adjustedEndTime = _endTime ?? _startTime; // Use _startTime if _endTime is null

            // Check if the end time is earlier than the start time
            if (_startTime >= adjustedEndTime) {
                adjustedEndTime = _startTime + TimeSpan.FromHours(1);
            }

            _newItem.End = _date.Value.Date.Add((TimeSpan)adjustedEndTime!);
        }

        var eventId = _repository.AddAsync(_newItem).Result;

        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentTextFirstLine, "Событие добавлено в бау данных");
        parameters.Add(x => x.ContentTextSecondLine, $"{eventId}");
        parameters.Add(x => x.ContentTextTherdLine, "Код события в базе данных");

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        await DialogService.ShowAsync<Dialog>("Delete", parameters, options);
        
        
    }
    
}
